
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-arm64-openssl-1.1.x", "rhel-openssl-1.0.x"]
}

generator erd {
  provider                  = "prisma-erd-generator"
  output                    = "ERD.svg"
  theme                     = "forest"
  includeRelationFromFields = true
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-arm64-openssl-1.1.x", "rhel-openssl-1.0.x"]
}

// https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/mongodb/install-prisma-client-typescript-mongodb
// https://www.prisma.io/docs/concepts/components/prisma-schema/data-model
// https://www.prisma.io/docs/concepts/components/prisma-schema/relations

model User {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  email           String   @unique
  phoneNumber     String
  hashPassword    String
  name            String
  profileImageURL String
  backgroundImageURL String
  age             Int      @default(18)
  birthday        String
  isAdmin         Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  level         Level?

  albums        Album[]
  posts         Post[]
  stories       Story[]
  comments      Comment[]

  followers     Follower?
  followings    Following?
  
  messages      Message[]
  // courses       Course[]
  // notifications Notification[]

  reportIDs      String[] @db.ObjectId
  user_to_report Report[] @relation(fields: [reportIDs], references: [id])

  chatIDs      String[] @db.ObjectId
  user_to_chat Chat[]   @relation(fields: [chatIDs], references: [id])

  courseIDs       String[] @db.ObjectId
  user_to_course  Course[]    @relation(fields: [courseIDs], references: [id])
}



// model Notification {
//   id      String  @id @default(auto()) @map("_id") @db.ObjectId
//   content String
//   isRead  Boolean

//   userId               String @db.ObjectId
//   notification_to_user User   @relation(fields: [userId], references: [id])
// }

model Report {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  reason String

  userIDs        String[] @db.ObjectId
  report_to_user User[]   @relation(fields: [userIDs], references: [id])
}

model Follower {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userFollower String[] @db.ObjectId

  userId       String   @unique @db.ObjectId
  follower_to_user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Following {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userFollowing String[] @db.ObjectId

  userId            String @unique @db.ObjectId
  following_to_user User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Level {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  currentXP    Int
  currentLevel Int

  userId        String @unique @db.ObjectId
  level_to_user User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Image {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  hash      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  postId        String @unique @db.ObjectId
  image_to_post Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  imageInfoId ImageInfo?
}

model ImageInfo {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  camera       String
  lens         String
  aperture     String
  focalLength  String
  shutterSpeed String
  ISO          String
  takenWhen    String
  copyRight    String

  imageId            String @unique @db.ObjectId
  imageInfo_to_image Image  @relation(fields: [imageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Category {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts     String[] @db.ObjectId
  category_to_post Post[]   @relation(fields: [posts], references: [id])
}

model Album {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId       String @db.ObjectId
  album_to_user User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  posts     String[] @db.ObjectId
  album_to_post Post[]   @relation(fields: [posts], references: [id])

}

// model Tag {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   name      String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   posts     String[] @db.ObjectId
//   tag_to_post Post[]   @relation(fields: [posts], references: [id])
// }



model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  points    Int
  image     Image?
  cmts      Comment[]

  userId       String @db.ObjectId
  post_to_user User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  categoryId      String[]   @db.ObjectId
  post_to_category  Category[] @relation(fields: [categoryId], references: [id])
  
  albumId       String[]   @db.ObjectId
  post_to_album  Album[] @relation(fields: [albumId], references: [id])

  tag       String[] 

  userLikedPost  String[]

  // contestId      String   @db.ObjectId
  // post_to_contest  Contest @relation(fields: [contestId], references: [id])
}

model Story {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  points    Int

  content String
  images  String[]
  comments    Comment[]

  userId        String @db.ObjectId
  story_to_user User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userLikedStory  String[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String?
  createdAt DateTime @default(now())

  userId      String @db.ObjectId
  cmt_to_user User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  postId      String @db.ObjectId
  cmt_to_post Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  storyId      String @db.ObjectId
  cmt_to_story Story  @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Contest {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // posts     Post[]
}

model Course {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  lessons Lesson[]

  userIDs          String[] @db.ObjectId
  course_to_user   User[]    @relation(fields: [userIDs], references: [id])
}

model Lesson {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  content String

  courseId         String @db.ObjectId
  lesson_to_course Course @relation(fields: [courseId], references: [id])
}

// Chat Application
model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String?
  createdAt DateTime @default(now())
  isImage   Boolean

  userId          String @db.ObjectId
  message_to_user User   @relation(fields: [userId], references: [id])

  chatId          String @db.ObjectId
  message_to_chat Chat   @relation(fields: [chatId], references: [id])
}

model Chat {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  messages Message[]

  userIDs      String[] @db.ObjectId
  chat_to_user User[]   @relation(fields: [userIDs], references: [id])
}
